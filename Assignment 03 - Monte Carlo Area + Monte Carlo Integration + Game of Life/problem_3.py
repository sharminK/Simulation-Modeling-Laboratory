# -*- coding: utf-8 -*-
"""Problem-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M6Z4jC2LHCrvYyiBM1o4-FgxJFVNOqIx
"""

import numpy as np
map = [
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,1,0,0,0,0,0,0],
       [0,0,0,0,0,1,1,0,0,0,0,0],
       [0,0,0,0,0,1,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
       [0,0,0,0,0,0,0,0,0,0,0,0],
]
map = np.array(map)
print("Initial grid (t=0)")
print(map)

def map_area(i,j):
  if ( i>=0 and i<12) :
    if (j>=0 and j<12):
      return True
  return False

def neighbor_counter(map, i, j):
    count = 0
    #first neighbor 
    first_i= i-1 
    first_j= j-1 
    if (map_area(first_i,first_j)):
      if (map[first_i, first_j]== 1):
        count+=1 
    #second neighbor 
    second_i= i-1 
    second_j= j 
    if (map_area(second_i,second_j)):
      if (map[second_i, second_j]== 1):
        count+=1 
    #third neighbor 
    third_i = i-1 
    third_j = j+1 
    if (map_area(third_i,third_j)):
      if (map[third_i, third_j]== 1):
        count+=1 
    #fourth neighbor 
    fourth_i= i 
    fourth_j= j-1 
    if (map_area(fourth_i,fourth_j )):
      if (map[fourth_i, fourth_j]== 1):
        count+=1
    #fifth neighbor 
    fifth_i= i 
    fifth_j= j+ 1 
    if (map_area(fifth_i,fifth_j )):
      if (map[fifth_i, fifth_j]== 1):
        count+=1
    #sixth neighbor 
    sixth_i = i+1
    sixth_j = j-1 
    if (map_area(sixth_i,sixth_j)):
      if (map[sixth_i, sixth_j ]== 1):
        count+=1
    #seventh neighbor 
    seventh_i= i+1 
    seventh_j= j  
    if (map_area(seventh_i,seventh_j)):
      if (map[seventh_i, seventh_j]== 1):
        count+=1
    #eight neighbor 
    eight_i= i+1 
    eight_j= j+1
    if (map_area(eight_i,eight_j)):
      if (map[eight_i, eight_j] == 1):
        count+=1
    return count

def die(map, i, j):
    #alive to die 
    if map[i,j] == 1:
      if (neighbor_counter(map, i, j) <2):
        return True
    #alive to die
    if map[i,j] == 1:
      if (neighbor_counter(map, i, j) >=4):
        return True
    #no dies
    if map[i,j] == 1:
      if (neighbor_counter(map, i, j)== 2 or  neighbor_counter(map, i, j)== 3):
        return False
    #die to alive
    if map[i,j] == 0:
      if (neighbor_counter(map, i, j) ==3):
        return True

    return False

for t in range(0,10):
    new_map = np.zeros((12,12), dtype = int)
    for i in range(0,12):
        for j in range(0,12):
            flag = die(map, i, j)
            if flag==True:
                new_map[i,j] = 1 - map[i,j]
            else:
                new_map[i,j] = map[i,j]
    
    map = new_map
    print("t=",t+1)
    print(map)